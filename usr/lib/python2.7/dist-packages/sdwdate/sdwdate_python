#!/usr/bin/env python

import sys
from url_to_unixtime import url_to_unixtime
import time, random

#import config


class sdwdate():
    def __init__(self):
        self.pool_one = ['dsafg',
                    'vv',
                    'gggg']
                    #dtsxnd3ykn32ywv6.onion',
                    #'znig4bc5rlwyj4mz.onion',
                    #'vtjkwwcq5osuo6uq.onion',
                    #'33y6fjyhs3phzfjj.onion',
                    #'y6xjgkgwj47us5ca.onion',
                    #'strngbxhwyuu37a3.onion',
                    #'swdi5ymnwmrqhycl.onion',
                    #'dqeasamlf3jld2kz.onion',
                    #'pubdrop4dw6rk3aq.onion',
                    #'hkjpnjbvhrxjvikd.onion',
                    #'v6gdwmm7ed4oifvd.onion',
                    #'vbmwh445kf3fs2v4.onion',
                    #'poulsensqiv6ocq4.onion',
                    #'tigas3l7uusztiqu.onion',
                    #'w6csjytbrl273che.onion',
                    #'ak2uqfavwgmjrvtu.onion']

        self.pool_two =  ['yn6ocmvu4ok3k3al.onion',
                    'acabtd4btrxjjrvr.onion',
                    '5r4bjnjug3apqdii.onion',
                    '2dermafialks7aai.onion',
                    'ymi7h25hgp3bj63v.onion',
                    'ppdz5djzpo3w5k2z.onion',
                    'pltloztihmfrg2sw.onion',
                    'ur5b2b4brz427ygh.onion',
                    'abkjckdgoabr7bmm.onion',
                    'bqs3dobnazs7h4u4.onion',
                    'fkut2p37apcg6l7f.onion',
                    '6iolddfbfinntq2b.onion',
                    'nzh3fv6jc6jskki3.onion']

        self.pool_three = ['cwoiopiifrlzcuos.onion',
                    'zsolxunfmbfuq7wf.onion',
                    'yfm6sdhnfbulplsw.onion',
                    'j6uhdvbhz74oefxf.onion',
                    '3g2upl4pq6kufc4m.onion',
                    'dju2peblv7upfz3q.onion',
                    'msydqstlz2kzerdg.onion',
                    'uj3wazyk5u4hnvtk.onion',
                    'wi7qkxyrdpu5cmvr.onion',
                    'ic6au7wa3f6naxjq.onion',
                    'timaq4ygg2iegci7.onion',
                    '344c6kbnjnljjzlz.onion',
                    'fncuwbiisyh6ak3i.onion']

        self.returned_unixtimes = 0

        self.number_of_pools = 3

        self.pool_one_done = False
        self.pool_two_done = False
        self.pool_three_done = False

        self.already_picked_index_pool_one = []
        self.already_picked_index_pool_two = []
        self.already_picked_index_pool_three = []

        self.url_random_pool_one = []
        self.url_random_pool_two = []
        self.url_random_pool_three = []

        print 'Start %s' % (time.time())

    def check_tor(self, remotes):
        ## We can [safely?] infer that something is wrong with tor.
        if  (remotes[0] == 'Connection closed unexpectedly' and
            remotes[1] == 'Connection closed unexpectedly' and
            remotes[2] == 'Connection closed unexpectedly'):
                ## Raise error, log, user warning.
                print self.urls[0]
                sys.exit(1)

    def sdwdate_loop(self):
        while self.returned_unixtimes < self.number_of_pools:
            self.urls = []
            self.unixtimes = []
            self.url_random = []

            random.seed()

            url_index = []

            if not self.pool_one_done:
                while True:
                    ## Pick a random pool index.
                    url_index = random.sample(xrange(len(self.pool_one)), 1)

                    ## Reset to prevent infinite loop, next condition would never be met,
                    ## probably raise an error before that happens.
                    if len(self.already_picked_index_pool_one) == len(self.pool_one):
                        self.already_picked_index_pool_one = []
                        self.url_random_pool_one = []

                    ## Was this index used?
                    if url_index not in self.already_picked_index_pool_one:
                        ## No, add to used indexes.
                        self.already_picked_index_pool_one.append(url_index)
                        ## Add it to the pool url list.
                        self.url_random_pool_one.append(self.pool_one[url_index[0]])
                        ## Add it to the url list to fetch.
                        self.url_random.append(self.pool_one[url_index[0]])
                        break

            if not self.pool_two_done:
                while True:
                    url_index = random.sample(xrange(len(self.pool_two)), 1)

                    if len(self.url_random_pool_two) == len(self.pool_two):
                        self.already_picked_index_pool_two = []
                        self.url_random_pool_two = []

                    if url_index not in self.already_picked_index_pool_two:
                        self.already_picked_index_pool_two.append(url_index)
                        self.url_random_pool_two.append(self.pool_two[url_index[0]])
                        self.url_random.append(self.pool_two[url_index[0]])
                        break

            if not self.pool_three_done:
                while True:
                    url_index = random.sample(xrange(len(self.pool_three)), 1)

                    if len(self.url_random_pool_three) == len(self.pool_three):
                        self.already_picked_index_pool_three = []
                        self.url_random_pool_three = []

                    if url_index not in self.already_picked_index_pool_three:
                        self.already_picked_index_pool_three.append(url_index)
                        self.url_random_pool_three.append(self.pool_three[url_index[0]])
                        self.url_random.append(self.pool_three[url_index[0]])
                        break

            print 'pool 1 picked urls %s' % self.url_random_pool_one
            print 'pool 2 picked urls %s' % self.url_random_pool_two
            print 'pool 3 picked urls %s' % self.url_random_pool_three
            print 'random urls %s' % self.url_random

            ## Fetch remotes.
            if len(self.url_random) > 0:
                self.urls, self.unix_times = url_to_unixtime(self.url_random)
            else:
                ## Add code here.
                sys.exit(1)

            self.check_tor(self.urls)

            if not self.pool_one_done:
                ## Is last element in the pool in returned urls?
                self.pool_one_done = self.url_random_pool_one[len(self.url_random_pool_one) - 1] in self.urls

            if not self.pool_two_done:
                self.pool_two_done = self.url_random_pool_two[len(self.url_random_pool_two) - 1] in self.urls

            if not self.pool_three_done:
                self.pool_three_done = self.url_random_pool_three[len(self.url_random_pool_three) - 1] in self.urls

            self.returned_unixtimes = len(self.urls)
            print 'Returned unixtimes: %s' % (self.returned_unixtimes)

        for i in range(0, len(self.urls)):
            print '"%s" %s' % (self.urls[i], self.unix_times[i])

        print 'End %s' % (time.time())

def main():
    sdwdate_ = sdwdate()
    sdwdate_.sdwdate_loop()

if __name__ == "__main__":
    main()
