#!/usr/bin/env python

import sys
from url_to_unixtime import url_to_unixtime
import time, random

from numbers import Number
import re

#import config


class Sdwdate():
    def __init__(self):
        self.pool_one = ['dtsxnd3ykn32ywv6.onion',
                    'znig4bc5rlwyj4mz.onion',
                    'vtjkwwcq5osuo6uq.onion',
                    '33y6fjyhs3phzfjj.onion',
                    'y6xjgkgwj47us5ca.onion',
                    'strngbxhwyuu37a3.onion',
                    'swdi5ymnwmrqhycl.onion',
                    'dqeasamlf3jld2kz.onion',
                    'pubdrop4dw6rk3aq.onion',
                    'hkjpnjbvhrxjvikd.onion',
                    'v6gdwmm7ed4oifvd.onion',
                    'vbmwh445kf3fs2v4.onion',
                    'poulsensqiv6ocq4.onion',
                    'tigas3l7uusztiqu.onion',
                    'w6csjytbrl273che.onion',
                    'ak2uqfavwgmjrvtu.onion']

        self.pool_two =  ['yn6ocmvu4ok3k3al.onion',
                    'acabtd4btrxjjrvr.onion',
                    '5r4bjnjug3apqdii.onion',
                    '2dermafialks7aai.onion',
                    'ymi7h25hgp3bj63v.onion',
                    'ppdz5djzpo3w5k2z.onion',
                    'pltloztihmfrg2sw.onion',
                    'ur5b2b4brz427ygh.onion',
                    'abkjckdgoabr7bmm.onion',
                    'bqs3dobnazs7h4u4.onion',
                    'fkut2p37apcg6l7f.onion',
                    '6iolddfbfinntq2b.onion',
                    'nzh3fv6jc6jskki3.onion']

        self.pool_three = ['cwoiopiifrlzcuos.onion',
                    'zsolxunfmbfuq7wf.onion',
                    'yfm6sdhnfbulplsw.onion',
                    'j6uhdvbhz74oefxf.onion',
                    '3g2upl4pq6kufc4m.onion',
                    'dju2peblv7upfz3q.onion',
                    'msydqstlz2kzerdg.onion',
                    'uj3wazyk5u4hnvtk.onion',
                    'wi7qkxyrdpu5cmvr.onion',
                    'ic6au7wa3f6naxjq.onion',
                    'timaq4ygg2iegci7.onion',
                    '344c6kbnjnljjzlz.onion',
                    'fncuwbiisyh6ak3i.onion']

        self.number_of_pools = 3

        self.pool_one_done = False
        self.pool_two_done = False
        self.pool_three_done = False

        self.already_picked_index_pool_one = []
        self.already_picked_index_pool_two = []
        self.already_picked_index_pool_three = []

        self.url_random_pool_one = []
        self.url_random_pool_two = []
        self.url_random_pool_three = []

        self.valid_urls = []
        self.unixtimes = []

        self.invalid_urls = []
        self.url_errors = []

        print 'Start %s' % (time.time())

    def general_proxy_error(self, pools):
        #print pools[0]
        #print pools[1]
        #print pools[2]
        if (pools[0] == 'Connection closed unexpectedly' and
            pools[1] == 'Connection closed unexpectedly' and
            pools[2] == 'Connection closed unexpectedly'):
                ## Raise error, log, user warning.
                print 'General Proxy Error'
                sys.exit(1)

        return True

    def check_remote(self, remote, value):
        try:
            if True:
                n = int(value)
                print 'check_remote "%s" %s, True' % (remote, value)
                return True
        except ValueError:
            print 'check_remote "%s" %s, False' % (remote, value)
            return False

    def sdwdate_loop(self):
        while len(self.valid_urls) < self.number_of_pools:
            print "MAIN LOOP"
            self.urls = []
            self.url_random = []

            if not self.pool_one_done:
                while True:
                    url_index = []
                    url_index = random.sample(range(len(self.pool_one)), 1)

                    if len(self.already_picked_index_pool_one) == len(self.pool_one):
                        self.already_picked_index_pool_one = []
                        self.url_random_pool_one = []
                        ## Should stop here? Declare the pool invalid?
                        #self.number_of_pools = self.number_of_pools - 1
                        #self.pool_one_done = True

                    if url_index not in self.already_picked_index_pool_one:
                        self.already_picked_index_pool_one.append(url_index)
                        print 'pool 1 added %s' % (self.pool_one[url_index[0]])
                        self.url_random_pool_one.append(self.pool_one[url_index[0]])
                        self.url_random.append(self.pool_one[url_index[0]])
                        break

            if not self.pool_two_done:
                while True:
                    url_index = []
                    url_index = random.sample(range(len(self.pool_two)), 1)

                    if len(self.url_random_pool_two) == len(self.pool_two):
                        self.already_picked_index_pool_two = []
                        self.url_random_pool_two = []

                    if url_index not in self.already_picked_index_pool_two:
                        self.already_picked_index_pool_two.append(url_index)
                        print 'pool 2 added %s' % (self.pool_two[url_index[0]])
                        self.url_random_pool_two.append(self.pool_two[url_index[0]])
                        self.url_random.append(self.pool_two[url_index[0]])
                        break

            if not self.pool_three_done:
                while True:
                    url_index = []
                    url_index = random.sample(range(len(self.pool_three)), 1)

                    if len(self.url_random_pool_three) == len(self.pool_three):
                        self.already_picked_index_pool_three = []
                        self.url_random_pool_three = []

                    if url_index not in self.already_picked_index_pool_three:
                        self.already_picked_index_pool_three.append(url_index)
                        print 'pool 3 added %s' % (self.pool_three[url_index[0]])
                        self.url_random_pool_three.append(self.pool_three[url_index[0]])
                        self.url_random.append(self.pool_three[url_index[0]])
                        break

            ## Fetch remotes.
            if len(self.url_random) > 0:
                print 'random urls %s' % (self.url_random)
                self.urls, self.returned_values = url_to_unixtime(self.url_random)
            else:
                ## Add code here.
                sys.exit(1)

            if self.general_proxy_error(self.returned_values):
                self.valid_urls = []
                self.unixtimes = []
                for i in range(len(self.urls)):
                    if self.check_remote(self.urls[i], self.returned_values[i]):
                        self.valid_urls.append(self.urls[i])
                        self.unixtimes.append(self.returned_values[i])
                    else:
                        self.invalid_urls.append(self.urls[i])
                        self.url_errors.append(self.returned_values[i])

            if not self.pool_one_done:
                for i in range(len(self.url_random_pool_one)):
                    self.pool_one_done = self.url_random_pool_one[i] in self.valid_urls
                print 'pool_one_done %s' % (self.pool_one_done)

            if not self.pool_two_done:
                for i in range(len(self.url_random_pool_two)):
                    self.pool_two_done = self.url_random_pool_two[i] in self.valid_urls
                print 'pool_two_done %s' % (self.pool_two_done)

            if not self.pool_three_done:
                for i in range(len(self.url_random_pool_three)):
                    self.pool_three_done = self.url_random_pool_three[i] in self.valid_urls
                print 'pool_three_done %s' % (self.pool_three_done)

        print 'valid urls %s' % (self.valid_urls)
        ## Duplicates in bad urls, same url appended because pool not done.
        ## Remove duplicates
        print 'bad urls %s' % (list(set(self.invalid_urls)))

        print 'End %s' % (time.time())

def main():
    sdwdate_ = Sdwdate()
    sdwdate_.sdwdate_loop()

if __name__ == "__main__":
    main()
