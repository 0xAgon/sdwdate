## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## Please use "/etc/sdwdate.d/50_sdwdate_user" for your custom
## configuration, which will override the defaults found here.
## When sdwdate is updated, this file may be overwritten.

## Bash Fragment.

## Enable/disable debugging.
## 1 enabled.
## 2 disabled.
DEBUG=0

## Run as the following user name.
## Not implemented. Has no effect.
USER=""

## Do or do not actually change the date/time after successfully fetching it.
## 0 set date.
## 1 do not set date.
DONT_SET_DATE=0

## do not move the time forward
## 0 disabled
## 1 enabled
NO_MOVE_FORWARD=0

## do not move the time backwards
## 0 disabled
## 1 enabled
NO_MOVE_BACKWARDS=0

## update hardware clock
## 0 disabled
## 1 enabled
SYSTOHC=0

## Log file.
LOG_FILE=/var/log/sdwdate.log

## Done file. Will be created after run no matter if failure or success.
DONE_FILE=/var/run/sdwdate/done

## Success file. Will only be created after a success.
SUCCESS_FILE=/var/run/sdwdate/success

## First success file. Will be created after the first success.
FIRST_SUCCESS_FILE=/var/run/sdwdate/first_success

## How many members per pool are allowed to fail.
## If too many members are not reachable, time will not be adjusted.
ALLOWED_PER_POOL_FAILURE_RATIO=0.34

## Temporary directory for file downloads.
## When not set, default to: TEMP_DIR="$(mktemp --directory)"
#TEMP_DIR=""

## Cache dir. Must not include spaces.
SDW_CACHE_DIR="/var/cache/sdwdate/sclockadj"

## proxy IP
PROXY_IP="127.0.0.1"

## proxy port
PROXY_PORT="9050"

## How often sdwdate should run in minutes.
## 0 disables it and sdwdate exits after run.
INTERVAL="60"

## How many minutes should be waited before running sdwdate again.
## Only has an effect when RANDOMIZE is set to 1 as well.
MIN_INTERVAL="10"

## Randomize the interval above.
## Minimum 10 minutes.
## Maximum $INTERVAL minutes.
## 0 disabled.
## 1 enabled.
RANDOMIZE="1"

## Use sclockadj instead of /bin/date (which would produce clock jumps) when
## starting up.
## 0 sclockadj disabled
## 1 sclockadj enabled
## defaults to: 0
SDWDATE_USE_SCLOCKADJ_WHEN_STARTUP="0"

## Use sclockadj instead of /bin/date (which would produce clock jumps) when
## re-starting up when sdwdate succeeded at least once after boot.
## 0 sclockadj disabled
## 1 sclockadj enabled
## defaults to: 1
SDWDATE_USE_SCLOCKADJ_WHEN_RESTARTUP="1"

## Use sclockadj instead of /bin/date (which would produce clock jumps) when
## in daemon mode.
## 0 sclockadj disabled
## 1 sclockadj enabled
## defaults to: 1
SDWDATE_USE_SCLOCKADJ_WHEN_DAEMON="1"

## sclockadj verbose logging or not
## --no-verbose
## --verbose
## defaults to: --no-verbose
SDWDATE_SCLOCKADJ_VERBOSE="--no-verbose"

## sclockadj change date or not
## --no-debug
## --debug
## defaults to: --no-debug (change date)
SDWDATE_SCLOCKADJ_CHANGE_DATE="--no-debug"

## If sclockadj should wait before its first iteration.
## --no-first-wait
## --first-wait
## default to: --no-first-wait
SDWDATE_SCLOCKADJ_FIRST_WAIT="--no-first-wait"

## Move clock minimum nanoseconds (except rest).
## defaults to: 500000
## (500000 ns = 0.5 ms = 0.0005 s)
SDWDATE_SCLOCKADJ_MOVE_MIN="500000"

## Move clock maximum nanoseconds (except rest).
## defaults to: 500000
## (500000 ns = 0.5 ms = 0.0005 s)
SDWDATE_SCLOCKADJ_MOVE_MAX="500000"

## Wait nanoseconds minimum before next iteration.
## defaults to: 1000000000
## (1000000000 ns = 1000 ms = 1 s)
SDWDATE_SCLOCKADJ_WAIT_MIN="1000000000"

## Wait nanoseconds maximum before next iteration.
## defaults to: 1000000000
## (1000000000 ns = 1000 ms = 1 s)
SDWDATE_SCLOCKADJ_WAIT_MAX="1000000000"

## This command will be `eval`uated before DISPATCH_PREREQUISITE and before running url to unixtime tool.
## sdwdate provides the $SDW_MODE variable, which is either set to
## - startup (when the sdwdate process is started)
## - daemon (when the sdwdate process finished one loop and will continue)
## When set to "", it will be skipped.
DISPATCH_PRE=""

## Prerequisite before trying to connect to servers.
## This is supposed to be a command to be `eval`uated and to exit with code
## - 0, if sdwdate should continue.
## - 1, if sdwdate should terminate itself due to an expected error.
## - 2, if sdwdate should wait 10 seconds and then run the command again.
## - Anything else, if sdwdate should terminate itself due to an unexpected error.
## It may be useful to check if the network is already reachable.
## When set to "", it will be skipped.
DISPATCH_PREREQUISITE=""

## This command will be `eval`uated when an unexpected error (bug) in sdwdate has been caught.
## sdwdate will provide the $error_message and $DONE_FILE variable.
## Remember to escape variables either using \$ or '$variable'.
## When set to "", it will be skipped.
DISPATCH_POST_ERROR=""

## Create $DONE_FILE on error.
## 1 enabled.
## 0 disabled.
SDW_TOUCH_DONE_FILE_ON_ERROR="1"

## Exit 1 on error. This will stop the daemon from running.
## 1 enabled.
## 0 disabled.
SDW_EXIT_ON_ERROR="1"

## echo remote unix time even when using --quiet
## true - enabled.
## false - disabled.
ECHO_UNIX_TIME="false"

## This command will be `eval`uated when sdwdate succeeded.
## When set to "", it will be skipped.
DISPATCH_POST_SUCCESS=""

## This command will be `eval`uated when sdwdate failed.
## When set to "", it will be skipped.
DISPATCH_POST_FAILURE=""

## This command will be `eval`uated before trying to connect to the pool one.
## When set to "", it will be skipped.
SDWDATE_TIME_TOOL_DISPATCH_PRE[SDWDATE_POOL_ONE]=""

## This command will be `eval`uated before after connecting to the pool one.
## When set to "", it will be skipped.
SDWDATE_TIME_TOOL_DISPATCH_POST[SDWDATE_POOL_ONE]=""

## This command will be `eval`uated before trying to connect to the pool two.
## When set to "", it will be skipped.
SDWDATE_TIME_TOOL_DISPATCH_PRE[SDWDATE_POOL_TWO]=""

## This command will be `eval`uated before after connecting to the pool two.
## When set to "", it will be skipped.
SDWDATE_TIME_TOOL_DISPATCH_POST[SDWDATE_POOL_TWO]=""

## This command will be `eval`uated before trying to connect to pool three.
## When set to "", it will be skipped.
SDWDATE_TIME_TOOL_DISPATCH_PRE[SDWDATE_POOL_THREE]=""

## This command will be `eval`uated before trying after connecting to the pool three.
## When set to "", it will be skipped.
SDWDATE_TIME_TOOL_DISPATCH_POST[SDWDATE_POOL_THREE]=""

## pool syntax
## "url.onion[:port]#comment"

## pool one.
##    SecureDrop List
##       info:
##          Last updated Thu Oct 23 16:15:00 PDT 2014
##          Organization	Landing Page	Tor Hidden Service Address
##       in use:
##          https://freedom.press/securedrop/directory
##          https://freedom.press/sites/default/files/securedrop_list.txt
##          https://freedom.press/sites/default/files/securedrop_list.txt.asc
##          https://freedom.press/sites/default/files/securedrop.asc
##       removed:
##          bczjr6ciiblco5ti.onion#Forbes	https://safesource.forbes.com	bczjr6ciiblco5ti.onion because down
SDWDATE_POOL_ONE=(
         "dtsxnd3ykn32ywv6.onion#BalkanLeaks	https://www.balkanleaks.eu	dtsxnd3ykn32ywv6.onion"
         "znig4bc5rlwyj4mz.onion#ExposeFacts	https://exposefacts.org	znig4bc5rlwyj4mz.onion"
         "vtjkwwcq5osuo6uq.onion#Greenpeace New Zealand	https://www.safesource.org.nz	vtjkwwcq5osuo6uq.onion"
         "33y6fjyhs3phzfjj.onion#The Guardian	https://securedrop.theguardian.com	33y6fjyhs3phzfjj.onion"
         "y6xjgkgwj47us5ca.onion#The Intercept	https://firstlook.org/theintercept/securedrop	y6xjgkgwj47us5ca.onion"
         "strngbxhwyuu37a3.onion#The New Yorker	https://projects.newyorker.com/strongbox	strngbxhwyuu37a3.onion"
         "swdi5ymnwmrqhycl.onion#NRKbeta	https://nrkbeta.no/tips	swdi5ymnwmrqhycl.onion"
         "dqeasamlf3jld2kz.onion#Project On Gov't Oversight (POGO)	https://securedrop.pogo.org	dqeasamlf3jld2kz.onion"
         "pubdrop4dw6rk3aq.onion#ProPublica	https://securedrop.propublica.org	pubdrop4dw6rk3aq.onion"
         "hkjpnjbvhrxjvikd.onion#Radio24syv	https://securedrop.radio24syv.dk	hkjpnjbvhrxjvikd.onion"
         "l7rt5kabupal7eo7.onion#BayLeaks	https://bayleaks.com	l7rt5kabupal7eo7.onion"
         "v6gdwmm7ed4oifvd.onion#Barton Gellman	https://tcfmailvault.info	v6gdwmm7ed4oifvd.onion"
         "vbmwh445kf3fs2v4.onion#The Washington Post	https://ssl.washingtonpost.com/securedrop	vbmwh445kf3fs2v4.onion"
         "poulsensqiv6ocq4.onion#Wired's Kevin Poulsen	https://pressfreedomfoundation.org/about/tech/kevin-poulsen	poulsensqiv6ocq4.onion"
)

## pool two.
SDWDATE_POOL_TWO=(
         "atlas777hhh7mcs7.onion:80#Hosted by Thomas White."
         "compass6vpxj32p3.onion:80#Hosted by Thomas White."
         "globe223ezvh6bps.onion:80#Hosted by Thomas White."
         "bbbbbb6qtmqg65g6.onion:80#Hosted by Thomas White."
         "pppppptkftqqnfsq.onion:80#Hosted by Thomas White."
)

## pool three.
SDWDATE_POOL_THREE=(
         "3g2upl4pq6kufc4m.onion:80#https://duck.co/forum/thread/1762/is-the-duckduckgo-hidden-service-legitimate"
         "dju2peblv7upfz3q.onion:80#https://guardianproject.info/2014/10/16/reducing-metadata-leakage-from-software-updates/"
)
